#!/usr/bin/env node

'use strict';

var pushstateServer = require('../lib/https-pushstate-server'),
	_ = require('lodash'),
	argv = require('minimist')(process.argv.slice(2));

let noArgs = _.isEmpty(argv._) && _.size(_.keys(argv)) == 1;

if (argv.h || argv.help || noArgs) {
	console.log([
		'usage: https-pushstate-server [options]',
		'',
		'options:',
		'  -r           Root Directory',
		'  -p           Port to use [8080]',
		'  -d           Directories with static files, comma separated',
		'  -s           Enable HTTPS',
		'  -c --cert    Path to ssl cert file',
		'  -k --key     Path to ssl private key file',
		'  -h --help    Print this list and exit.'
		].join('\n'));
	process.exit();
}

var root = argv.r,
	port = argv.p || 8080,
	dirs = _.isEmpty(argv.d) ? [] : _.split(argv.d, ','),
	enableSSL = argv.s,
	certPath = argv.c,
	keyPath = argv.k;


if (!root) {
	console.log('Root directory missing. Use -h for more info.');
	process.exit();
}

if (enableSSL) {
	if (!certPath) {
		console.log('HTTPS is enabled but certificate path is missing. Use -h for more info.');
		process.exit();
	}
	if (!keyPath) {
		console.log('HTTPS is enabled but private key path is missing. Use -h for more info.');
		process.exit();
	}
}

let options = {};
options.root = root;
options.port = port;
options.dirs = dirs;
options.https = enableSSL;
options.certPath = certPath;
options.keyPath = keyPath;

let started = function() {
	console.log((options.https ? 'HTTPS' : 'HTTP') + ' pushstate-server started on port ' + options.port + '...');
	console.log('Directories with static files: ', options.dirs);
};

let stopped = function() {
	console.log('pushstate-server stopped.');
	process.exit();
};
process.on('SIGINT', stopped);
process.on('SIGTERM', stopped);

try {
	let server = pushstateServer.createServer(options);
	server.start(started);
}
catch (e) {
	console.log('Exception', e);
}

